// import { useFirestoreDocumentMutation } from "@react-query-firebase/firestore";
// import { User } from "firebase/auth";
// import { doc,collection, addDoc, query} from "firebase/firestore";
// import { orderBy, where } from "firebase/firestore";
// import { useFirestoreQueryData } from "@react-query-firebase/firestore";
// import React from "react";
// import { useState } from "react";
// import { useQueryClient } from "react-query";
// import { getmonth } from "./paymentutils";
// import { db } from './../../firebase/firebaseConfig';
// import { paymentValidation } from "./payment-form-validate";
// import { Shop } from './../../utils/other/types';
// var uniqid = require('uniqid');


// interface Payment{
//     shopno:string,
//     payment:number,
//     paymentId:string,
//     madeBy?:string|null,
//     month:string,
//     date:Date,
//     mode:"cheque"|"cash_deposit"|"mpesa"|"direct_transfer"
// }

// interface PaymentFormProps {
//   user?: User|null;
//   open:boolean
//   setOpen: React.Dispatch<React.SetStateAction<boolean>>

// }

// export const PaymentForm: React.FC<PaymentFormProps> = ({ open,setOpen,user}) => {
//   const floormap = { ground: "G-", first: "M1-",second: "M2-",third: "M3-" };
//   const floors = [["ground","G-"], ["first","M1-"], ["second","M2-"], ["third","M3-"]];
//   const queryClient = useQueryClient();

//   const [floor, setFloor] = useState("ground");
//   const [error, setError] = useState({ name: "", message: "" });
  
//   const [input, setInput] = useState<Payment>({
//     date: new Date(),
//     shopno:"G-01",
//     payment:0,
//     paymentId:"",
//     madeBy:"",
//     month:getmonth,
//     mode:"cash_deposit"

//   });


//  const shopsRef = query(
//     collection(db, "shops", floor, "shops"),
//     orderBy("shopnumber", "asc"),
//     where("shopfloor", "==", floor)
//   );


// const updateFloor=(newfloor:string[])=>{
//    setFloor(newfloor[0])
// }
 
// const updateShop=(sop:Shop)=>{
// setInput({...input,shopno:sop.shopnumber})
//  }
//   const paymentId=uniqid(input.shopno,floor)
//   const shopPaymentRef = doc(db, "shops",floor,"shops",input.shopno,"paymenthistory",paymentId);
  
//   const addMhopMutation = useFirestoreDocumentMutation(
//     shopPaymentRef,
//     { merge: true },
//     {
//       onMutate: async (newShop) => {
//         // Cancel any outgoing refetches (so they don't overwrite our optimistic update)
//         console.log(newShop)
//         await queryClient.cancelQueries(["shops",floor]);
//         // Snapshot the previous value
//         const previousShops = queryClient.getQueryData(["shops",floor]);
//         // Optimistically update to the new value
//          if(previousShops){
//           //@ts-ignore
//           queryClient.setQueryData(["shops",floor], (old) => [...old, newShop]);
         
//         }
    
//         // Return a context object with the snapshotted value
//         return { previousShops };
//       },
//       // If the mutation fails, use the context returned from onMutate to roll back
//       onError: (err, newTodo, context) => {
//         //@ts-ignore
//         queryClient.setQueryData(["shops",floor], context.previousShops);
//       },
//       // Always refetch after error or success:
//       onSettled: () => {
//            queryClient.invalidateQueries(["shops",floor]);
//       },
//     }
//   );


// console.log("input === ",input)
// const handleChange = (e: any) => {
//     const { value } = e.target;
//     setInput({
//       ...input,
//       [e.target.id]: value,
//     });
//   };



// const handleSubmit = async(e: any) => {
//   e.preventDefault();

//   const item:Payment={
//   date:input.date,
//   shopno:input.shopno.toUpperCase(),
//   madeBy:user?.displayName,
//   month:input.month,
//   payment:input.payment ,
//   mode:input.mode,
//   paymentId

// }


// console.log('mutatin done',addMhopMutation)
// if (paymentValidation({ input, error, setError })){
//           addMhopMutation.mutate(item)
//     setOpen(!open)
//     }

//  };

// const shopQuery = useFirestoreQueryData(["shops", floor], shopsRef); 

// if (shopQuery.error) {
//     return (
//       <div className="w-full h-full flex flex-wrap  text-red-900">
//       ERROR LOADING SHOPS {shopQuery.error.message}
//         </div> );
//   }

//   if (shopQuery.isLoading) {
//     return <div className="w-full h-full flex-center"> loading ..... </div>;
//   }

//   const floorshops = shopQuery.data as Shop[]
//   return (
//     <div className="w-full h-full  flex-center flex-col fixed top-[9%] bottom-0 z-50">
//       <div className="fixed top-[12%] right-[5%] w-fit bg-slate-600 p-2 text-white font-medium">Made By:{user?.displayName}</div>
//         <form className="w-full h-full flex-center">
          
//           <div className="fixed top-[12%] w-full flex-center flex flex-wrap">
//           <div className="w-fit bg-slate-500 p-2 text-white">Floor:</div>
//           {floors.map((item,index)=>{
//            return(
//           <div key={index}
//           onClick={()=>updateFloor(item)}
//           className="rounded-sm m-1 p-2 bg-slate-600 hover:bg-purple-600 
//           font-bold text-white cursor-pointer">
//             {item[0]}</div>)
//           })}
//           </div>  


//           <div className="w-full h-full  flex-col md:flex-row items-center  justify-center bg-slate-500">

//           <div className="flex justify-center items-center  w-full md:w-[40%] h-full overflow-y-scroll">

//         <div className="flex-col justify-center  bg-purple-200 mt-[90%]">
//          <label className="flex-center text-4xl font-bold capitalize mr-2 w-fit h-fit
//           last:bg-purple-500 ">{floor}</label>
//                 <div className="flex-center  w-full flex-wrap">
//                 {
//                 floorshops.map((item,index)=>{
//                 return(
//                 <div key={index}
//                 style={{backgroundColor:input.shopno===item.shopnumber?"purple":""}}
//                 onClick={()=>updateShop(item)}
//                 className="p-2 m-1 bg-slate-700 h-fit w-[90%]
//                 cursor-pointer hover:bg-slate-800">
//                 <div className="text-lg font-bold ">{item.shopnumber}</div>
//                 <div className="flex-center p-1 m-1 bg-slate-500">{item.shopname}</div>
//                </div>
//                 )
//                 })
//                 }
//             </div>
//             </div>

//             </div>

//             <div className="p-2 w-[90%] flex flex-col items-center justify-center bg-red-600 rounded-md text-white">

//               <div className="w-full h-full flex sm:flex-row flex-col">
//                 {/* shop number */}
//                 <div className="w-full flex flex-col m-1">
//                   <label className="text-sm">Shop Number</label>
//                   <input
//                     type="text"
//                     placeholder="Shop number"
//                     className="p-2 w-[95%]  rounded-md "
//                     id="shopno"
//                     onChange={handleChange}
//                     value={input.shopno}
//                   />
//                   {error && error.name === "shopno" ? (
//                     <div className="shop-form-error">{error.message}</div>
//                   ) : null}
//                 </div>

//                 {/* shop name */}
//                 <div className="w-full flex flex-col m-1">
//                   <label className="text-sm">Shop Name</label>
//                   <input
//                     type="text"
//                     placeholder="Payment"
//                     className="p-2 w-[95%]  rounded-md "
//                     id="payment"
//                     onChange={handleChange}
//                     value={input.payment}
//                   />
//                   {error && error.name === "payment" ? (
//                     <div className="shop-form-error">{error.message}</div>
//                   ) : null}
//                 </div>
//               </div>

//               <div className="w-full h-full flex sm:flex-row flex-col ">
//                 {/* monthly rent */}
//                 <div className="w-[95%] flex flex-col m-1">
//                 <label className="text-sm">Mode</label>
//                       <select id="mode" onChange={handleChange} className="p-2 border-0">
//                         <option value="cash_deposit">select the payment mode</option>
//                         <option value="cash_deposti">cash deposit</option>
//                         <option value="cheque">Cheque</option>
//                         <option value="mpesa">Mpesa</option>
//                         <option value="direct_deposit">Direct Deposit</option>
//                       </select>
                    
//                   {error && error.name === "mode" ? (
//                     <div className="shop-form-error">{error.message}</div>
//                   ) : null}
//                 </div>
//               </div>
//               <button
//              onClick={(e)=>handleSubmit(e)}
//              className="py-2 px-5 m-2 bg-slate-700 rounded 
//              hover:bg-slate-800 capitalize font-medium text-white"
//              >add</button>
//             </div>
         

//           </div>
//         </form>
//       </div>
 
//   );
// };
